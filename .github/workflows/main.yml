# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: vntg-wdk-client-quick-starter-product-ci

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
      - main
    tags:
      - "v*"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      docker_image: ${{steps.prep.outputs.docker_image}}
      date: ${{ steps.date.outputs.date }}
      tag: ${{steps.prep.outputs.tag}}
      tags: ${{steps.prep.outputs.tags}}
    steps:
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +%F)"
      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE="$(echo "${GITHUB_REPOSITORY/docker-/}" | tr '[:upper:]' '[:lower:]')"
          set -x
          if [[ $GITHUB_REF == refs/heads/* ]]; then
             if [[ $GITHUB_REF == refs/heads/*/* ]] ; then
               BRANCH="${DOCKER_IMAGE}:$(echo $GITHUB_REF | sed "s|refs/heads/||g" | sed "s|/|-|g")"
             else
               BRANCH=${GITHUB_REF#refs/heads/}
             fi
            case ${BRANCH} in
              "main" | "master" )
                  TAG="latest"
                  BRANCHTAG="${DOCKER_IMAGE}:latest"
                ;;
              * )
            esac
          fi
          if [[ $GITHUB_REF == refs/tags/* ]]; then
               GITTAG="${DOCKER_IMAGE}:$(echo $GITHUB_REF | sed 's|refs/tags/||g')"
          fi
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          if [ -n "${BRANCHTAG}" ] && [ -n "${GITTAG}" ]; then
            TAGS=${BRANCHTAG},${GITTAG}
          else
            TAGS="${BRANCHTAG}${GITTAG}"
          fi
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=docker_image::${DOCKER_IMAGE}
          echo ::set-output name=tag::${TAG}
          echo ::set-output name=version::${VERSION}
  client-build:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: React Main - Build And Push
        id: React_main_build_and_push
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./docker/production/Dockerfile
          push: true
          # build-args: |
          #   GIT_TOKEN=${{  github.token  }}
          #push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ghcr.io/${{needs.prepare.outputs.docker_image}}:${{needs.prepare.outputs.tag}}
